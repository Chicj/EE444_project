
                //After confirming the header, the program will cycle through the stored data
                while(gps[i] != '\0')
                  {
                    //comma counting function, used  to parse the data string
                    if(gps[i] == ',')
                     {
                      //ensure counter is not storing the comma
                      i++;
                    switch(comma)
                      {
                        //Header identifier, unneeded data
                        case 0:
                          comma++;
                          break;
                        
                        //UTC time, unneeded
                        case 1:
                          comma++;
                          break;
                        
                        //Latitude Data
                        case 2:
                          cycle = i;
                          for(cycle = i+1; cycle = i+9; cycle++)
                            {
                              if(gps[cycle] == '.' && cycle > 2)
                                {
                                 cycle++;
                                 sec = (gps[cycle]-48)*1000+(gps[cycle+1]-48)*100+(gps[cycle+2]-48)*10+(gps[cycle+3]-48);
                                }
                              else if (cycle > 2)
                                {
                                  min = (gps[cycle]-48)*10+(gps[cycle+1]-48);
                                }
                              else
                                {
                                  deg = (gps[cycle]-48)*10+(gps[cycle+1]-48);
                                }
                            }
                           GpsLat = deg + (min/60) + (sec/3600);
                           comma++;
                           break;
                        
                        //Latitude north or south
                        case 3:
                          cycle = i+1;
                          if(gps[cycle] == 'S')
                            {
                              GpsLat = 0-GpsLat;
                            }
                          else
                            {
                              break;
                            }
                           comma++;
                           break;
                        
                        //Longitude Data
                        case 4:
                         cycle = i;
                          for(cycle = i+1; cycle = i+9; cycle++)
                            {
                              if(gps[cycle] == '.' && cycle > 2)
                                {
                                 cycle++;
                                 sec = (gps[cycle]-48)*1000+(gps[cycle+1]-48)*100+(gps[cycle+2]-48)*10+(gps[cycle+3]-48);
                                }
                              else if (cycle > 2)
                                {
                                  min = (gps[cycle]-48)*10+(gps[cycle+1]-48);
                                }
                              else
                                {
                                  deg = (gps[cycle]-48)*10+(gps[cycle+1]-48);
                                }
                            }
                           GpsLong = deg + (min/60) + (sec/3600);
                           comma++;
                           break;
                        
                        //Longitude East or West
                        case 5:
                          cycle = i+1;
                          if(gps[cycle] == 'W')
                            {
                              GpsLong = 0-GpsLong;
                            }
                          else
                            {
                              break;
                            }
                           comma++;
                           break;

                         //Ignored Data points
                         case 6:
                          comma++;
                          break;
                         case 7:
                          comma++;
                          break;
                         case 8:
                          comma++;
                          break;

                         //Elevation Data
                         case 9:
                          GpsElv = (gps[i]-48)+(gps[i+2]-48)/10;
                          comma++;
                          break;

                      }
                     }
                    i++;  // increment counter
                  }
              